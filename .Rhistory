q(save="no")
4+5
help(package="GGally")
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
dim(evals)
str(evals)
summary(evals$score)
hist(evals$score)
sum(evals$score < 3)
ggplot(data=evals, aes(x=bty_avg,y=score)) + geom_point()
sum(is.na(evals$score))
sum(is.na(evals$bty_avg))
ggplot(data=evals,aes(x=bty_avg,y=score)) + geom_jitter()
ggplot(data=evals,aes(x=bty_avg,y=score)) + geom_jitter() +
geom_smooth()
ggplot(data=evals,aes(x=bty_avg,y=score)) + geom_jitter() +
geom_smooth(method="lm")
ggplot(data=evals,aes(x=bty_avg,y=score)) + geom_jitter() +
geom_smooth(method="lm", se=FALSE)
dev.off()
ml1 <- lm(score ~ bty_avg, data=evals)
summary(ml1)
ggplot(data=ml1,aes(x=.fitted,y=.residuals)) + geom_point() +
geom_hline(yintercept = 0)
ml1
names(ml1)
ggplot(data=ml1,aes(x=.fitted,y=residuals)) + geom_point() +
geom_hline(yintercept = 0)
ggplot(data=ml1,aes(x=.fitted,y=.resid)) + geom_point() +
geom_hline(yintercept = 0,linetype="dashed") +
xlab("Fitted (predicted) values") +
ylab("Residuals")
ggplot(data=ml1,aes(x=.resid)) + geom_histogram(binwidth = 25)
ggplot(data=ml1,aes(x=.resid)) + geom_histogram()
evals %>% ggplot(aes(x=bty_f1lower, y=bty_avg)) + geom_jitter()
summarise(evals, cor(bty_f1lower, bty_avg))
ggpairs(evals,columns = 13:19)
m2_bty_gen <- lm(score ~ bty_avg + gender,data=evals)
summary(m2_bty_gen)
summary(ml1)
ggplot(m2_bty_gen, aes(x=.resid)) + geom_histogram()
ggplot(m2_bty_gen, aes(x=fitted,y=.resid)) + geom_point() +
geom_hline(yintercept = 0, linetype="dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(m2_bty_gen, aes(x=.fitted,y=.resid)) + geom_point() +
geom_hline(yintercept = 0, linetype="dashed") +
xlab("Fitted values") +
ylab("Residuals")
# Histogram of residuals, a little left skewed but close to 0
ggplot(m2_bty_gen, aes(x=.resid)) + geom_histogram()
ml3 <- lm(score ~ m_bty_rank, data=evals)
ml3_bty_rank <- lm(score ~ rank, data=evals)
summary(ml3_bty_rank)
levels(evals$rank)
-0.14518 < -0.12968
ml3_bty_rank <- lm(score ~ rank, data=evals)
summary(ml3_bty_rank)
ml3_bty_rank <- lm(score ~ bty_avg + rank, data=evals)
summary(ml3_bty_rank)
hyp_thet <- data.frame(gender="male", bty_avg=3)
predict(m2_bty_gen, hyp_thet)
summary(m2_bty_gen)
3.74734 + 0.07416 * 3 + 0.17239
# Prediction interval around this prediction
predict(m2_bty_gen, newprof, interval = "prediction", level = 0.95)
# Predict new value the evaluation score for a
# professor, Dr. Hypo Thetical, who is a male
# tenure track professor with an average beauty of 3.
newprof <- data.frame(gender="male", bty_avg=3)
# Prediction interval around this prediction
predict(m2_bty_gen, newprof, interval = "prediction", level = 0.95)
m4_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m4_full)
str(m4_full)
str(evals)
summary(m4_full)
m5_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m5_full)
m6 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m6)$adj.r.squared
m7 <- lm(score ~ gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m7)$adj.r.squared
m8 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m8)$adj.r.squared
m9 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m9)$adj.r.squared
m10 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m10)$adj.r.squared
0.1634262 <  0.1623604
dev.off()
rm(list=ls())
q(ave="no")
q(save="no")
q(save="no")
q(save='no')
q(save="no")
q(save='no')
install.packages('ISLR')
library(ISLR)
library(ggplot2)
library(caret)
data("Wage")
summary(Wage)
?createDataPartition
inTrain <- createDataPartition(y=Wage$wage, p=.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
dim(Wage)
2102/3000
{}
featurePlot(x=training[,c('age','education','jobclass')],
y=training$wage,
plot='pairs')
qplot(age,wage,data=training)
qplot(age,wage,color=jobclass,data=training)
install.packages('hmisc')
install.packages('Hmisc')
cut2()
uninstall.packages('Hmisc')
?cut
remove.packages('Hmisc')
cutWage <- cut(training$wage, breaks = 3)
cutWage
table(cutWage)
library(swirl)
swirl()
bye()
dev.off()
q(save='no')
shiny::runApp('C:/Users/julia/OneDrive/Escritorio/WebApp1')
runApp('C:/Users/julia/OneDrive/Escritorio/WebApp1')
?runif
runif(100)
runApp('C:/Users/julia/OneDrive/Escritorio/WebApp1')
runApp('C:/Users/julia/OneDrive/Escritorio/WebApp1')
?reactive
?mtcars
str(mtcars)
lm1 <- lm(mpg ~ am, data=mtcars)
nrow(mtcars[complete.cases(mtcars),])
dim(mtcars)
lm1 <- lm(mpg ~ am, data=mtcars)
summary(lm1)
new <- with(mtcars, ifelse(am==1,"manual","automatic"))
mtcars$am_fac <- with(mtcars, ifelse(am==1,"manual","automatic"))
head(mtcars)
str(mtcars)
lm1 <- lm(mpg ~ as.factor(am_fac), data=mtcars)
summary(lm1)
mtcars$am_fac <- with(mtcars, as.factor(ifelse(am==1,"manual","automatic")))
str(mtcars)
lm1 <- lm(mpg ~ am_fac, data=mtcars)
summary(lm1)
summary(lm1)$coef
with(mtcars, boxplot(mpg,color=am_fac))
?boxplot
# Load libraries
library(ggplot2)
?qplot
mtcars %>% qplot(x=mpg, colour = am_fac, geom = 'boxplot')
qplot(x=mpg, data=mtcars, colour = am_fac, geom = 'boxplot')
?aggregate
aggregate(mpg ~ am_fac, data= mtcars, FUN = median)
aggregate(mpg ~ am_fac, data= mtcars, FUN = nrow)
aggregate(mpg ~ am_fac, data= mtcars, FUN = mean)
aggregate(mpg ~ am_fac, data= mtcars, FUN = length)
?mtcars
?within
mtcars3 <- within(mtcars, {
newvar <- as.factor(ifelse(am==1,"manual","automatic"))
})
head(mtcars3)
nrow(mtcars[!complete.cases(mtcars),])
qplot(x=mpg, data=mtcars2, colour = am_fac, geom = 'boxplot')
rm(list=ls())
mtcars2 <- within(mtcars, {
am_fac <- as.factor(ifelse(am==1,"manual","automatic"))
})
qplot(x=mpg, data=mtcars2, colour = am_fac, geom = 'boxplot')
lm1 <- lm(mpg ~ am_fac, data=mtcars2)
summary(lm1)$coef
round(7.244939,2)
summary(lm1)$coef[2]
names(summary(lm1))
fitted.values(lm1)
plot(fitted.values(lm1), summary(lm1)$residuals)
plot(summary(lm1)$residuals, fitted.values(lm1))
with(mtcars, cor(am,mpg))
with(mtcars, plot(mpg))
with(lm1, plot(.fitted, .resid))
with(lm1, plot(fitted.values, residuals))
mean(lm1$coefficients)
mean(lm1$residuals)
with(lm1, hist(residuals))
?hist
with(lm1, hist(residuals, breaks=8))
with(lm1, hist(residuals, breaks=5))
# Diagnostics
# Plotting residuals
with(lm1, hist(residuals, breaks=6))
with(lm1, hist(residuals, breaks=7))
?shapiro.test
anova(lm1)
# Check for normality at a 5% significance level
shapiro.test(lm1$residuals)
lm1 %>% ggplot(aes(x=.fitted,y=.resid)) + geom_point() +
geom_hline(yintercept = 0, linetype="dashed")
ggplot(data=lm1, aes(x=.fitted,y=.resid)) + geom_point() +
geom_hline(yintercept = 0, linetype="dashed")
with(lm1, plot(fitted.values, residuals))
confint(lm1)
summary(lm1)
aggregate(mpg ~ am_fac, data= mtcars2, FUN = mean)
?abline
with(lm1, plot(fitted.values, residuals))
abline(h=0, lty=2)
with(lm1, plot(fitted.values, residuals, pch=19))
abline(h=0, lty=2, color='blue')
summary(mtcars$mpg)
with(lm1, plot(fitted.values, residuals, pch=19,
xlab='Fitted values', ylab='Residuals'))
abline(h=0, lty=2, col='blue')
# Residuals don't seem to behave in a completely
# random manner, perhaps it is due to the
# fitted values
head(mtcars)
dev.off()
q(save='no')
3.85/4*5
install.packages('googleVis')
library(googleVis)
data("Exports")
names(Exports)
G <- gvisGeoChart(Exports, locationvar = 'Country',
colorvar = 'Profit',options = list(width=600, height=400))
print(G, 'chart')
install.packages('plotly')
q(save='no')
q(save='no')
q(save='no')
knitr::opts_chunk$set(echo = FALSE)
l=runif(100,min=50.05,max=51.01)
lng=runif(100,min=-76.65,max=-76.55)
c = sample(c("red","blue","green"), 20,
replace=TRUE)
df2 <- data.frame(lat=l,
lng=lng,
col=c,
stringAsFactors=F)
df2 %>% leaflet() %>% addCircleMarkers(color=df2$col,                       clusterOptions=markerClusterOptions()) %>%
addLegend(labels=LETTERS[1:3],
colors=c("blue","red","green"))
library(leaflet)
l=runif(100,min=50.05,max=51.01)
lng=runif(100,min=-76.65,max=-76.55)
c = sample(c("red","blue","green"), 20,
replace=TRUE)
df2 <- data.frame(lat=l,
lng=lng,
col=c,
stringAsFactors=F)
df2 %>% leaflet() %>% addCircleMarkers(color=df2$col,                       clusterOptions=markerClusterOptions()) %>%
addLegend(labels=LETTERS[1:3],
colors=c("blue","red","green"))
library(plotly)
plot_ly(x=precip, type = 'histogram')
data("EuStockMarkets")
library(tidyr)
library(dplyr)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x= ~time, y= ~price, color= ~index)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = 'Blues', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
state_pop <- data.frame(State = state.abb,
Pop = as.vector(state.x77[,1]))
# create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', 'Population:', Pop))
# Make state borders red
borders <- list(color=toRGB("red"))
# Setup some mapping options
map_options <- list(
scope='usa',
projection=list(type='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = 'Blues', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
?datasets
library(ggplot2)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data=d, aes(x=carat, y=price)) +
geom_point(aes(text=paste("Clarity:", clarity), size=4)) +
geom_smooth(aes(colour=cut, fill=cut)) + facet_wrap(~cut)
(gg <- ggplotly(p))
gg
library(help = "datasets")
help(package="datasets")
str(WorldPhones)
class(WorldPhones)
str(uspop)
str(EuStockMarkets)
state_pop <- data.frame(State = state.abb,
Pop = as.vector(state.x77[,1]))
# create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', 'Population:', Pop))
# Make state borders red
borders <- list(color=toRGB("red"))
# Setup some mapping options
map_options <- list(
scope='usa',
projection=list(type='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = 'Blues', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
?colors
?plot_ly
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = 'YlOrRd', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = '#99d8c9', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = '#d8b365', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = 'YlOrRd', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
borders <- list(color=toRGB("#d8b365"))
# Setup some mapping options
map_options <- list(
scope='usa',
projection=list(type='albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z=~Pop, text=~hover, locations=~State,
type='choropleth', locationmode='USA-states',
color=~Pop, colors = 'YlGn', marker=list(line=borders)) %>%
layout(title='US Population in 1975', geo=map_options)
q(save='no')
setwd("C:/Users/julia/OneDrive/Escritorio")
library(caret)
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
# Since 19216 represents approximately 98% of the observations
# variables with that amount of NAs are excluded
clean_dat <- function(df){
exclude_cols <- character()
for(col in names(df)){
# Count # of NAs for a particular col
total_nas <- sum(is.na(df[,c(col)]))
# Check if it reaches the threshold
if (total_nas == 19216 | total_nas == nrow(df)){
exclude_cols <- append(exclude_cols, col)
}
}
exclude_cols
}
# Remove cols from both training and test sets
training2 <- training[ , !(names(training) %in% clean_dat(training))]
testing2 <- testing[ , !(names(training) %in% clean_dat(training))]
# Remove classe from training and problem_id from testing
all(names(training2[,-93]) == names(testing2[,-93]))
# Since there are 5 labels for the outcome
# variable and there are 92 features, a
# simple decision tree is trained
preProc <- preProcess(training2[,-93], method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2[,-93])
fit <- train(training2$classe ~ ., data = trainPC, method='glm')
